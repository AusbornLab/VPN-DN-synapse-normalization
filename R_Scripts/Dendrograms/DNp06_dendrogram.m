%path(path, '/Users/jamesjeanne/Dropbox/Jamie/Code/Utils/TREES1.15/')

close all
clear all



start_trees
load_tree()

synapseNodesLC4{1} = [13922 20488 13878  5710 20493 20358 20508  6292 13876 20465  6197 24366 24362  6291 12054 20489  5751  6371  6217 20433  9702  6214 20467 24368 20459 20251 ...
6215  6343 20366 20265 13804 13913 24369 12059  6708  6299 13924  6299 24628 20365 20494 13878 24535 12060 20262 20472 13913 20502 13902 20576  6671  6343 ...
24537  5733 20498 20358  6673 13889 13893 13910 24369 13891  6205 13909 24339 24350  5748 13907 20494 24535  6214 24345 20498  6299  6217 20361 24629 24535 ...
20467 20467  6238  6291 14008  5710  6394 20468  6672  6293 24369  6299 14008 20250  6290 12061 20492 20489  6205 20265  5744];

synapseNodesLC6{1} = [3556 3575 3534 3539 3540 3531 3567 3513 3534 3580 3541 3498 3540 3556 3540 3512 3572 3560 3522 3546 3533 3523 3534 3567 3512 3560 3576 3497 3517 3579 3539 ...
3519 3585 3578 3527 3582 3539 3560 3522 3570 3583 3574 3572 3500 3522 3548 3514 3564 3556 3542 3539 3586];

synapseNodesLPLC1{1} = [3257 10078 10392  2719  9864 10514  2876 11621  9673  9652 10195  2588 10111  2970 10070  9634  9984  9758 10319  9828  3249  3266  2648  9856  2776  9952 ...
11455  2610  9564 10518  2970  9886  2582 10363  2825  2608 10415  9665  2785  3022  9957  9957  9627  3220 10480 10196  2846  3037  2654  9466  9995 10007 ...
10176  2628 11803  3338  3215  2963  3307  2818 10016 13838  2922  9528  3334 10503  2796 10007  2714  9858  2961  2619 10359  9580  2785 10277  9508  9977 ...
2618  3311  9881  9545  3079 10231 11761  2709  3259  3312 10400  9562  3135  9575 10099 10408  3276 10345 10301  9509 10484  9971  2709  9796  3321  3061 ...
9937  2698 10479  2991  3043  3122  2776 10334  9790 11535  9959 10404  2848 10423  9502  9805 10481  9498  2697  2689  2666 10231  9760  3005 10348 10384 ...
2978 10230 10186 10318  2969 10106  9922 10425 10406  2841  2591 10434  3022  2987 10379  3295 10366  2678  2640  2880  9533  2978  9902  9549  9652 10513 ...
2587  2824 11620  9669 10508  3091 11795  2759  2627  3073 10418  3337 10302  3014  2687 10098  9829 10511  3076  2843  9846  2745 10476  9484 10438  2842 ...
10483  2743  3113 10070  2897  3122  9827  3004  3337  9543  9465 10510  2862  9893  9874  9546  3053  9528 11557  9761  9659 10400 10289  2618  2595  9899 ...
9866 10349  9808 10386  9910  3317  9655  9568  2855 10494  9523  2649 10400  9882  9924  9512  9580  2922 10492  9937  3091 10335  2739  2846  9478  9505 ...
9571  2631 11798  9816  9911 10438  2913  3035  2863  2840 10358 10398  2987 10331 10332 11556  9617 10306  3333  9618  9490  9518  3122  9864  2605  9875 ...
10412 11806 10371  2680  2699 11455 10452  9751  9932 11806  9651 10386  9859 10186  2605  9836 10072  3044 10360 10330  9540  9515  2684 10327  3034  3294 ...
3233 10351  2804  3074  2775  9910  9653  3227  2634  3135  9973  9856  3258  9869  9870  2665  2962  3123  2669  3091  9591 10199  3015  2811 10313  2855 ...
9845  3057  2788  3328 10018  9879  3109  2645  9790  2972 10180 10407  2824 10326  9873  9814 11455  3057  9904  2687 10376  2980  2962  3303  9526 10346 ...
3267  3213  2970  9612 11513 10514  3086 10452  9804 10309  2991 10199  3219 10327  9504  9621 10350  3331 10090 11801  9959  2641 10407  2805 10520  9980 ...
9646  9663 10313  9838 10069  2711 10106  9607  9504  2577 10497  2796  3070  9669  2875  3305  3123 11578  2898  3080  9461  2980 10410  9872  2686  3071 ...
2694  3341  9908 10332  2970  2980  2687 10408 10514  9649  9474 10324  2742  9461  2668 11797 10175  9480  9586 11805  9504  9856  2991  9671  9828  2631 ...
10342 10090  3332  3332 10477  2763  2642 10197  2782 10501  9963  9547  2810  2666  3071 10174 10098  2789  9793  9871  3014  3321  9629  2776  9879  2787 ...
9751  2977  9758  2633  2913  3314  9669  3091  3074  3078  2992  9472 10017  3079 11557  2615  2830  3112 10298  9924  2699  2848  2591  2878  9464  2808 ...
9959  9787  9558  2694 10097 11484  9863  2698  3337 10400  2758  2883 10235 10180  3261  9639 11785 11618  9947 10442 10295  9593 10232 10187 10070 10467 ...
9831  2619  3085  9641  2802  2630 10297  9917  9762  9638  2673  3078  3070  2739  2789 10302  2808  2743  2859  3015 10305 10183 10462  9978  2639 10071 ...
3318  9853  3304  9467  9532 10180  2835 10186  2646  9923  9531 10343  2577  9957  2626  3269  3238  3255 10345  3288  9623  3265  3213  9618  2611  9477 ...
10413 10368  9483 10439  2993 10334  9572  3339  2597 10371  9547  9504  3134 10314  9799  3015  2624  3091  2583  9533 10411  2764  2784  2772 11802  9622 ...
2688  2856  2799  3091  9651 10292  9590  9532  2812  9576  3074 10467 10440  3295  2969  9845  2985  2689 10490  3020  9978  3036  2675  9467  2776 10400 ...
3234 10357 10111  9534  2601 10350  2885  2794  9761  9534  3070  2968  2689 10512  2677 11558  2577  9787  2863  2993  2787  3280  3084  9860 11803  2990 ...
10337 10399  9474 10388 10116  9647  2824  2593  2885  3325  2903  9608  3061  9513  9785 10194  3214  2869  9947  2796 10361  3112  9618 10383  3049 10430 ...
2962  9623  3332  2906 10333  9860  9467  2968  2969  2815  2643  2853  2973  2643  9984  2923  2613  9557  9876  9924 11798  3336  2782  3338 11455  2880 ...
9641 10077  3115  3217  3134 10443 10196 10091  2847  3221  9613  9594 10363 10392  2581  2788  2656];

synapseNodesLPLC2{1} = [14552 19295 19523 11253 14442 13979 19498 11264 11318 11374 19431 11899 19465 11965 11275 14417 14362 11913 20038 19317 13978 14374 19378 19557  9717 14223 ...
11312 11364 19350 11834 12168 14229 11837 10081 14349  9404 14570 19504  9401 11333 20138 12174 11341 11437 14379 11334 14428 10173 14533 14418 11288 19480 ...
10315 19425 11284 19557 11917 12036 19534 11364 14579 19290 14537  8795 19471 12033 19296  9345 14346 14571 19322 14390 11338 11373 19432 14527  9405 11427 ...
10165 14530 11920 13176  9400 20140 19504 19557 14339 12035 19527 19553 19436 12038 19493 19505 14575 11314 12201 14382  8883 19362 12145 19362 10081 20038 ...
12053 19322 14535 19352 14410 19296 11827 11371 19318 11369 11390  9747 19456 19351 19551 14403 19468 14444 14342 12135 11313 19293 20135 19480 11356 11307 ...
11833 11275 14584 13956 19499 19426 12184 19374 12045 19493  9347  9405 11401 19451 11998 11379 13958 14513 11999 12120 19425 11422 14233 19295 14382 19318 ...
12039 11393 14573 14546 19418  9408 14358 20040 19508 19322 19518 11313 10054 11922 19323 12196 19413 19510 11246 10163 19382 14226 14338 11272 19345 11367 ...
20045 10172 12179 14625 19360 19401 19446 14448  8880 14560 12181 19317 19338 19493 11998 20141 19557 12132 14362 14236 12227 14404 14448 19524 14394 10085 ...
11437 19445 11375 11323 14273 19507 19444 12169 12186 11392 11435 20158 11281 12009 11901 11969 11907 19445 11323 19490 11253 14349 11952 11763 14388 19445 ...
19304 14533 11989 11355 19489 12132 11305 11329 19415 12166 11918 19550 19378 12011 14349 19544 14237 11369  8879 11278 20039 19347 19340  8883 10050 19556 ...
11250 19517 14238 14565 10315 12180 11437 19380 19327 19493 19352 11965 13204 10050 14343 14344 19528 10082 14529 12012 14384 12150 14554 19331 11332 11357 ...
14347 11898 11371 14391  9431 12205 14346 19494  8812 19476 11280 10025 11951 14428 14362 10026 13265 11270 14456 11841 14534 19353 19338 14079 20031 19533 ...
12226 19469 11307 11830 19519 10030 19434 13977 14371 11820 12185  8811 19492 19481 19324 11340 19365 14409 13267 19447 14547 14079  9746 19361 14371 19525 ...
11356  8794 14356 12125 14355 11323 10103 19391 19401 14568 14417 11248 11337 20038 19535 19478 19359 19311 19424 11307 14233  8878 19292 11292 12017 11391 ...
11926 14375 11965 19547 14393 14623 19361 11967 19419 11289 12014 11829 14568 11246 14259 13242 12032 12003 11964 11326  8886 10060 19453 12207 14577 13243 ...
8811 12011 11979 14584 19431 14440 14401 19446 20158 11998 12120 19294 12217 19305 12040 11390 19546 12037 12157 12205 11898 19557 14561  9403 19516 11998 ...
14363 11831 11867  9404 12013 14622 11254 14354 11996 12173 12055 10165 11343 11965 11977  8817 12046 19295 11253 10315 12201 12209  8877 12056 12139 19485 ...
19557 14442 11905 11252 10056 11276 14352  8797 12005 13241 12194 11422 11272 10087 11422 19318 19445 11914 12141 10086 12058 11342 14406 12048 19512 14395 ...
11379 19431 11264 19441 11375 11395 19379 14424 11323 19331 12187 14365 11310 13259 11401 19424 14546 10529 11399 11435 20041 11314 19505  8879 19445 19301 ...
14374 10089 20039 12169 11324 11312 19488 12054 19540 20156 11978 12132 20154 14437 14627 14230 19444  8794 19446 14232 11280 19325 12008 14350 19424 14358 ...
11333 13986 11838 19455 14360 14360 14465 19294 14351 19457 14393 12035 12044 19341 19530  8886 11246 19307 13240 12010 13238 14393 14525  8794 19426  8883 ...
19478 14220 19337 19402 11307 12031 14529 19441 19328 13983 19340 11253 12034 11365  8711 11840 11264 11332 14437 11823 19535  8799 11351 11919 11918 11399 ...
14575 10062 13977 14428 19297  8795 11906  8883 19446 13259 19290 10055 11357 14561 11319 14575 14465 20145 19367 11332 19402 11996 12182 19527 19437  8794 ...
14227 14549 11340 19310 14538 13184 11428 14367 14459 12043 13242 13258 19524 19330 11399 19425 11251  8886 19368 11839 19290 11966 14361 11323 13258 11899 ...
19458 11967 14365 11332 11839 11999  8875 11367 19430 13981  9750 14429 12159 11820 11918 14430 13204 14364 14222 19557];

synapseNodesLPLC4{1} = [9145];


% - intree::integer:index of tree in trees or structured tree
% - color::RGB 3-tupel, vector or matrix: RGB values {DEFAULT [0 0 0]}
%     if vector then values are treated in colormap (must contain one value
%     per node then!).
%     if matrix (N x 3) then individual colors are mapped to each
%     element, works only on line-plots
% - DD:: 1x3 vector: coordinates offset {DEFAULT no offset [0,0,0]}
% - ipart::index:index to the subpart to be plotted {DEFAULT: all nodes}
% - res::integer>1: resolution for cylinders. Does not affect line and
%     quiver or blatt. {DEFAULT: 8}
% - options::string: {DEFAULT '-p'} has to be one of the following:
%     '-b'  : 2D pieces are displayed on a 3D grid (-b stands for -blatt)
%             showing the diameter but not as real cylinders. Output is a
%             series of patches. Fastest representation.
%        '-b1' : patches are mapped on x y {DEFAULT}
%        '-b2' : patches are mapped on x z
%        '-b3' : patches are mapped on y z
%     '-p'  : correct cylinder representation but not yet flawless and a
%             bit slower than "blatt" representation.
%     '-2l' : 2D (using only X and Y). forces line output (2D), no diameter
%             (slower), color is mapped independently of matlab, always
%             min to max.
%     '-3l' : 3D. forces line output (2D), no diameter (slower, as '-l')
%     '-2q' : 2D (using only X and Y). edges are represented as arrows
%             (using quiver) . Color vectors do not work.
%     '-3q' : 3D. edges are represented as arrows (using quiver, as '-q')
%   additional options:
%     '-thin'  : all diameters 1um, for line and quiver linewidth 0.25
%     '-thick' : all diameters + 3um, for line and quiver linewidth 3


figure
%plot_tree(trees{1},[0 0 0], [0 0 0], 1:6857, 8, '-p')
plot_tree(trees{1})%,[0 0 0], [0 0 0], 1:6857, 8, '-p')
view(180,0) %azimuth, elevation



axis xy



figure
for i = 1:2
    %subplot(2,1,i)

    [xdend tree] = xdend_tree(trees{i});

    yvec= Pvec_tree(trees{i});
    wscale = 1;

    idpar = trees{i}.dA * (1 : size(trees{i}.dA, 1))'; % vector containing index to direct parent
    idpar (idpar == 0) = 1;
    X1 = (xdend(idpar) ) ; % coordinates of the nodes in dendrogram
    X2 = xdend           ;
    Y1 = yvec(idpar)     ;
    Y2 = yvec            ;
    
    X1all = [X1; X2];
    X2all = [X2; X2];
    Y1all = [Y1; Y1];
    Y2all = [Y1; Y2];
    
    X1all = [X1(1:end); X2(1:end)];
    X2all = [X2(1:end); X2(1:end)];
    Y1all = [Y1(1:end); Y1(1:end)];
    Y2all = [Y1(1:end); Y2(1:end)];

    HP = line ([Y1all Y2all]', [X1all X2all]');
    set (HP, 'color', 'k');
    
    
    xpositionsLC4 = xdend(synapseNodesLC4{i})';
    ypositionsLC4 = yvec(synapseNodesLC4{i})';
    hold on
    rgbValues_LC4 = [0,0,1];
    plot(ypositionsLC4, xpositionsLC4, 'o', 'Color', rgbValues_LC4, 'MarkerFaceColor', rgbValues_LC4, 'MarkerSize', 3)

    xpositionsLC6 = xdend(synapseNodesLC6{i})';
    ypositionsLC6= yvec(synapseNodesLC6{i})';
    hold on
    rgbValues_LC6 = [1, 0, 0.91];
    plot(ypositionsLC6, xpositionsLC6, 'o', 'Color', rgbValues_LC6, 'MarkerFaceColor', rgbValues_LC6, 'MarkerSize', 3)

    xpositionsLPLC1 = xdend(synapseNodesLPLC1{i})';
    ypositionsLPLC1 = yvec(synapseNodesLPLC1{i})';
    hold on
    rgbValues_LPLC1 = [1, 0, 0];
    plot(ypositionsLPLC1, xpositionsLPLC1, 'o', 'Color', rgbValues_LPLC1, 'MarkerFaceColor', rgbValues_LPLC1, 'MarkerSize', 3)
    
    xpositionsLPLC2 = xdend(synapseNodesLPLC2{i})';
    ypositionsLPLC2 = yvec(synapseNodesLPLC2{i})';
    hold on
    rgbValues_LPLC2 = [1, 0.647, 0];
    plot(ypositionsLPLC2, xpositionsLPLC2, 'o', 'Color', rgbValues_LPLC2, 'MarkerFaceColor', rgbValues_LPLC2, 'MarkerSize', 3)

    xpositionsLPLC4 = xdend(synapseNodesLPLC4{i})';
    ypositionsLPLC4 = yvec(synapseNodesLPLC4{i})';
    hold on
    rgbValues_LPLC4 = [0, 1, 0];
    plot(ypositionsLPLC4, xpositionsLPLC4, 'o', 'Color', rgbValues_LPLC4, 'MarkerFaceColor', rgbValues_LPLC4, 'MarkerSize', 3)


    ylim([-25 2500])
    xlim([0 350])
    
    
end

set(gcf, 'Position', [0 0 900 500])
set(gcf, 'renderer', 'painters')
