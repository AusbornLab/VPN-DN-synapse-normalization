

close all
clear all



start_trees
load_tree()

synapseNodesLC4{1} = [10317 11238  9592  9251  8699 11504  9255 11310  9440 10179  9201 11424 10533  9094  9899 10388  9890  9686  9039 10648 10170  9357 11663  9007  9808  8910 ...
11327 10770 10186  9511  9717 10048  9724 11711  9671 11079  9251  9454  9397  9634  9201 10030  9576 11275  9660 10156 10426  9265 10426  8895  8883 10526 ...
9316  9310  9680  9297  8907 10381 10524  9350 10832 10626 11369  8894  9207 11431 11447 11521  9516  8811  9197  9199 10021  9533  9668 10019 10009  9633 ...
10307 11616 10276 11310 10181 10537 11570 11372  8685  9388  9512  9449  9890 10969  9521  9429 10247  9505  9872  8743 10004 11770  8987  8804  8786  9122 ...
9665 11482  9701  9201 11636 10820  9760 10496  9861  9282 11706  8781 10400 11295 11027  9384  9310  8740 10969 10002 11570 10929 10187  9843  9534 10944 ...
9934  9824 10033  9893 11336  9450  8960 10086 10048  9898 11561  9509  9668 10062 10759 11724 11460 11459  9258 10077  9526 10186 10767  9559  9122 11613 ...
11044 11512 11366 11294 10197  9905 10318  9349  8914  9012 10013 11256  8754 10345 10254  8877  9860 11671 10326  9441 11616 11707 11663 11186  9454  9501 ...
10775  8776  9631  9097  9992 11648 11728  9622  9572  9831 11275 11676 11077  9975  8994 10343 10020 10357  8911 11653  9655  9592 10820 11225 11569 10109 ...
10178 11201  9537  9326  9462 10428 10649 10086 10829  8785  9318  8920  9388 11298  9808 11041  9573  9292  9785 10109 10787  9605 11073 10011 11063 10649 ...
9423  8864  8900  9355 10794  9264  9827  9649  8803  9500  8882 11336 10237  9227 11708  9289 10755 10078  9683 10244 11429  9765 10627 11320  9669 11298 ...
9035  9348 10041 11424  8808  9556 10686 10021 10839 10942 10766  9821 11266  9119  9823  8743 10326  9441 10111 10262 10765  9576  9890  9366  9737  9636 ...
9327 10296  9730 10185  9657 10818  9572 10969  9328  9760 10626 11053 11262  9559  8926  8994  9356 10249 10162  9300  9996 11697 10527 10123  9539 10021 ...
9935 10342  9951  8785 10040  9018 11664 11662 11513 10112  8883  9870  9326  9564 11063  9824  9097  8904  9929 10835  9575 10013  9587  9004  8912 11525 ...
10109  9539  9321  9356 10360  9711  8794  9424  9564  9685 10103 10007 10034 10345 11469  9544  9299 11730 11667 10004 10750  9924  9931  8743  9827 11451 ...
10780 10011  8825 11262 10599 11198  9310  9097 10828  9207 10360  9526  8925  9742  9036  8798  9643  9299 10276 10102 10533  9350 10800 10349 11431 11550 ...
11446 10881  9808 10423 11709 10223  9756 10373  9708  9123 11198 10497  9938  9197  9689  9510  9680  9401  9871 10829 11565 11403  9771 11250 10113  9456 ...
10086  9668 10488  9905  9511 10806  9537  9831  8744 10281  9511  9036  8992 11770 11570  9449 10627 11274 11441 10537 10835 11131 11350 10765  9432 10003 ...
11616 11696  9016  9115 11616  8708  9899  9783 11197  9898  8794  8993  9093  9622 10400 10975 11410 11292 10485 10129 10264  9358  9753 10303 10423 11421 ...
9844 11275  9539 11564 10189  9671  8785 10126 10505  8776 10523 11398  9909 11353 11664  9689 11281 11648  9311  9564  9866 10366 10077  9316  9244 10321 ...
9984  9819 10050  8784 10102  9929  9915  9522 10202  9981  9702 11474  9955  9355  9292 10124 10060 11510 11576 10007  8885  9841  9119 11706 10188 10102 ...
10223  9511 11447  9802  9516  9513  8697 10230  9041 10150  9384  8819 11338  9687  9910  9924 11336 10106 11421  9126 10196 11533 10069  9936  9905  9401 ...
10034 11303  9461  9389 10231 11294 10102 10173 10159  8883  9621  9909  9785 10372  9428  9368 10804  9809  9975  9194 11576  9660 11336  8806  9681 10068 ...
9783 10021  9860 10371  9931 11510  9213  9869 11042  9263  9305 10381  9302  9784 10372 11357 11198  9841  9363 11318  9703 10625  8909 10075  8778 10016 ...
10020  9932 10111  9257  8915 10916  8925 11279  9577  9936  9526  9269  9915 10016  9339 10399 11073  9424  9992 10529  9750 10576  8944  9512 10268 10881 ...
8776 11650 10111  9513 10033  9315 10817  9772  9994  9819 10303 10253  9501 10902 11398  9827 11437 11711 10025 10159  8787  9441 11489 11313 11803 10309 ...
11280  8883  8881  9115  9990  9680  9760 10223 10513 11409 10904  9425  9190 11338  8976  9841 11699 10104  8909 11432 10779 10178 11406  9210  8699 10814 ...
10255  9740  9753  9866  9037 10492  9093  9922 11761  8885  9924  8898  9637  9107 10013 10976  9674  9844 11212  8993 10050  9871 10016 10368  8959 11291 ...
8814 10276  9682 11362 10770 10510  8883  9671  9210  9718 10761  9980 11197 11320  8827  9305  9823  9824 11699 11093 10975 10077  9986  9894 11336  9808 ...
9311  8800  9869  9731 10949  9532 10007  8885  9328  9818  8794 10128  9984 11468  9939  9412 10342 10169  8883  8885  9797  9818  9991 10849 10888 10012 ...
10002  9733  9534  8883 11489 10276 10308  8795  9575 10764 10774 11407 11448  9194 10485 10073 11447  8854 11410 10971  8885  8819 10626  9162  9827 11477 ...
9386 11520  9275 10204 10269 10828 11249 11249 11245 11560 11289 11290];


% - intree::integer:index of tree in trees or structured tree
% - color::RGB 3-tupel, vector or matrix: RGB values {DEFAULT [0 0 0]}
%     if vector then values are treated in colormap (must contain one value
%     per node then!).
%     if matrix (N x 3) then individual colors are mapped to each
%     element, works only on line-plots
% - DD:: 1x3 vector: coordinates offset {DEFAULT no offset [0,0,0]}
% - ipart::index:index to the subpart to be plotted {DEFAULT: all nodes}
% - res::integer>1: resolution for cylinders. Does not affect line and
%     quiver or blatt. {DEFAULT: 8}
% - options::string: {DEFAULT '-p'} has to be one of the following:
%     '-b'  : 2D pieces are displayed on a 3D grid (-b stands for -blatt)
%             showing the diameter but not as real cylinders. Output is a
%             series of patches. Fastest representation.
%        '-b1' : patches are mapped on x y {DEFAULT}
%        '-b2' : patches are mapped on x z
%        '-b3' : patches are mapped on y z
%     '-p'  : correct cylinder representation but not yet flawless and a
%             bit slower than "blatt" representation.
%     '-2l' : 2D (using only X and Y). forces line output (2D), no diameter
%             (slower), color is mapped independently of matlab, always
%             min to max.
%     '-3l' : 3D. forces line output (2D), no diameter (slower, as '-l')
%     '-2q' : 2D (using only X and Y). edges are represented as arrows
%             (using quiver) . Color vectors do not work.
%     '-3q' : 3D. edges are represented as arrows (using quiver, as '-q')
%   additional options:
%     '-thin'  : all diameters 1um, for line and quiver linewidth 0.25
%     '-thick' : all diameters + 3um, for line and quiver linewidth 3


figure
%plot_tree(trees{1},[0 0 0], [0 0 0], 1:6857, 8, '-p')
plot_tree(trees{1})%,[0 0 0], [0 0 0], 1:6857, 8, '-p')
view(180,0) %azimuth, elevation



axis xy



figure
for i = 1:2
    %subplot(2,1,i)

    [xdend tree] = xdend_tree(trees{i});

    yvec= Pvec_tree(trees{i});
    wscale = 1;

    idpar = trees{i}.dA * (1 : size(trees{i}.dA, 1))'; % vector containing index to direct parent
    idpar (idpar == 0) = 1;
    X1 = (xdend(idpar) ) ; % coordinates of the nodes in dendrogram
    X2 = xdend           ;
    Y1 = yvec(idpar)     ;
    Y2 = yvec            ;
    
    X1all = [X1; X2];
    X2all = [X2; X2];
    Y1all = [Y1; Y1];
    Y2all = [Y1; Y2];
    
    X1all = [X1(1:end); X2(1:end)];
    X2all = [X2(1:end); X2(1:end)];
    Y1all = [Y1(1:end); Y1(1:end)];
    Y2all = [Y1(1:end); Y2(1:end)];

    HP = line ([Y1all Y2all]', [X1all X2all]');
    set (HP, 'color', 'k');
    
    
    xpositionsLC4 = xdend(synapseNodesLC4{i})';
    ypositionsLC4 = yvec(synapseNodesLC4{i})';
    hold on
    rgbValues_LC4 = [0,0,1];
    plot(ypositionsLC4, xpositionsLC4, 'o', 'Color', rgbValues_LC4, 'MarkerFaceColor', rgbValues_LC4, 'MarkerSize', 3)

    ylim([0 1400])
    xlim([0 350])
    
    
end

set(gcf, 'Position', [0 0 900 500])
set(gcf, 'renderer', 'painters')
